{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Wade Armstrong",
	"language": "en",
	"home_page_url": "https://wadearmstrong.com/_site/",
	"feed_url": "https://wadearmstrong.com/_site/feed/feed.json",
	"description": "Engineering Leader With Proven Record of Building High-Performing, Quality-Oriented Teams.",
	"author": {
		"name": "Wade Armstrong",
		"url": "https://wadearmstrong.com/README/"
	},
	"items": [
		{
			"id": "https://wadearmstrong.com/_site/things/Git%20Submodules,%20and%20When%20to%20Use%20Them/",
			"url": "https://wadearmstrong.com/_site/things/Git%20Submodules,%20and%20When%20to%20Use%20Them/",
			"title": "Git Submodules, and When to Use Them",
			"content_html": "<h1 id=\"git-submodules-and-when-to-use-them\" tabindex=\"-1\">Git Submodules, and When to Use Them <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/Git%20Submodules,%20and%20When%20to%20Use%20Them/\">#</a></h1>\n<p>Git submodules are a fairly obscure feature of git. Imagine you have a main repo in which you want to include another, separate git repo — maybe a dependency or a vendor or something like that. Submodules let you include a separate git repo within a main git repo, while still being able to pull, push, and do all the git things to that separate git repo.</p>\n<h2 id=\"git-submodules-why\" tabindex=\"-1\">Git Submodules: Why? <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/Git%20Submodules,%20and%20When%20to%20Use%20Them/\">#</a></h2>\n<p>The historic requirement from submodules is, so far as I understand, a desire to make it easy to vendor dependencies. These days, it's much easier to run a private npm/pip/etc. registry for anything internal you want to vendor. Heck, if you're doing a component-based application, you pretty much need your own registry, and the deploy processes to automatically push your components there.</p>\n<p>But sometimes you don't want to go to that amount of trouble. Maybe it's a small internal tool, or something only one person works on — the overhead of a real deploy process may be excessive. Maybe you've got a blog powered by one of those static site generators that keeps everything in <code>/content</code> and you don't want to worry about your content changing every time you <code>git checkout</code> a new branch.<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/Git%20Submodules,%20and%20When%20to%20Use%20Them/\" id=\"fnref1\">[1]</a></sup></p>\n<h2 id=\"ok-so-what-do-i-type-into-the-terminal\" tabindex=\"-1\">OK, So What Do I Type Into the Terminal <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/Git%20Submodules,%20and%20When%20to%20Use%20Them/\">#</a></h2>\n<p>As we discussed above, you probably don't want to use submodules. But, if your project is small enough, here's how you do it.</p>\n<p>Start by cloning your submodule into your main git repo (assumes Github, but easy enough to change this for Gitlab etc.):</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">git</span> submodule <span class=\"token function\">add</span> git@github.com:username/repo.git <span class=\"token operator\">&lt;</span>destination<span class=\"token operator\">></span> </code></pre>\n<p>So you're adding the repo as a submodule, in the folder named <code>destination</code>. (You can skip that value if you don't want to control your folder name.)</p>\n<p>Now you can pull updates by:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull --recurse-submodules   <br><span class=\"token function\">git</span> submodule update <span class=\"token parameter variable\">--init</span> <span class=\"token parameter variable\">--recursive</span></code></pre>\n<p>Note that you're doing two things here:</p>\n<ol>\n<li>Pulling the change as normal (<code>--recurse-submodules</code> lets you do this outside of the submodule directory<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/Git%20Submodules,%20and%20When%20to%20Use%20Them/\" id=\"fnref2\">[2]</a></sup>)</li>\n<li>Updating the git index of the main project to point to whatever commit it is you just pulled</li>\n</ol>\n<p>That last part is the important one here; the submodule points to a specific commit (or tag, etc.). If you want to update the content you have, you need to save the new revision you just pulled.</p>\n<p>Congrats, now you've got a mildly-inconvenient process that is probably simpler than a real deploy process for your small project. Have fun!</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Yep, that's me. <a href=\"https://github.com/juniorbird/wadearmstrong.com\">This site</a> is made with <a href=\"https://www.11ty.dev\">eleventy</a> and I manage <a href=\"https://github.com/juniorbird/wadearmstrong.com-content\">my content in a separate repo</a>. I started doing this after I realized that I'd written a blog post I wanted to publish now in a feature branch I didn't want to merge now. <a href=\"https://wadearmstrong.com/_site/things/Git%20Submodules,%20and%20When%20to%20Use%20Them/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>If you don't want to remember to do this, you can add this to the project config by running <code>git config --local submodule.recurse true</code>. Or use <code>--global</code>, go crazy if you like, shouldn't be damaging. <a href=\"https://wadearmstrong.com/_site/things/Git%20Submodules,%20and%20When%20to%20Use%20Them/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
			"date_published": "2023-07-11T00:00:00Z"
		}
		,
		{
			"id": "https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/",
			"url": "https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/",
			"title": "CommonJS, ES Modules, and Why to Test Natively in One or the Other",
			"content_html": "<h1 id=\"commonjs-es-modules-and-why-to-test-natively-in-one-or-the-other\" tabindex=\"-1\">CommonJS, ES Modules, and Why to Test Natively in One or The Other <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\">#</a></h1>\n<p>In Javascript, there are two different ways that a given file can export functions, objects, values, and other components, for reuse in a second file or files — CommonJS ('CJS') and ES Modules ('ESM'). These two methods of export are actually surprisingly different, because they were designed for use in completely separate circumstances.</p>\n<h2 id=\"where-you-ll-see-the-difference\" tabindex=\"-1\">Where You'll See The Difference <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\">#</a></h2>\n<p>If you've worked in Javascript for a while, you've probably become used to the <a href=\"https://nodejs.org/docs/latest-v20.x/api/modules.html#requireid\"><code>require()</code></a> syntax for including the contents of other files, and the <a href=\"https://nodejs.org/docs/latest-v20.x/api/modules.html#moduleexports\"><code>module.exports</code></a> syntax for exporting features from a file:</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> importedModule <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/module.js'</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token function\">importedModule</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>\tvalue<br><span class=\"token punctuation\">}</span> </code></pre>\n<p>That's a tip-off that you're using CommonJS; ESM uses <a href=\"https://tc39.es/ecma262/#sec-imports\"><code>import</code></a> and <a href=\"https://tc39.es/ecma262/#sec-exports\"><code>export</code></a> for the same jobs:</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> importedModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'/path/to/module.js'</span><br><br><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token function\">importedModule</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> value<span class=\"token punctuation\">;</span></code></pre>\n<p>For most developers, this will be the only time they see a difference between the two approaches. Which syntax you use is probably going to be defined by the frameworks you're using:</p>\n<ul>\n<li>Node natively supports CJS, but has supported ESM since v.12</li>\n<li>React supports both, but <a href=\"https://create-react-app.dev\">create-react-app</a> uses ESM (which one you choose will primarily be defined by your bundler)</li>\n<li>Angular supports both, but strongly prefers ESM</li>\n<li>Vue switched to ESM in v.13</li>\n</ul>\n<p>While technically you can mix CJS and ESM in a single project,<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\" id=\"fnref1\">[1]</a></sup> that's a good way to cause build chain problems. You can't practically mix the two syntaxes in a single file<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\" id=\"fnref2\">[2]</a></sup>.</p>\n<h2 id=\"what-is-the-difference-under-the-hood\" tabindex=\"-1\">What Is The Difference Under The Hood <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\">#</a></h2>\n<p>But it's not just build chains that have trouble with the two different export formats — there are actually significant technical differences in the way that ESM and CJS are implemented.</p>\n<h3 id=\"why-commonjs-is-here\" tabindex=\"-1\">Why CommonJS is Here <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\">#</a></h3>\n<p>First, a little history. When Node first came around, there was no standardized way to include components from different files. They chose CommonJS, one of the major proposals at the time, not least because it was straightforward to use on servers<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\" id=\"fnref3\">[3]</a></sup>.</p>\n<p>One thing that made it so straightforward on servers was that it loads all included modules <em>synchronously</em> — that is, it kind of assumes that the modules will just 'be there' when it hits the <code>require()</code> line in the code. This is true on servers, so that's a great choice for Node.</p>\n<h3 id=\"why-es-modules-are-here\" tabindex=\"-1\">Why ES Modules are Here <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\">#</a></h3>\n<p>Of course, on the Web, files are not at all 'just there' — they take a while to load from wherever in the world they are hosted. CJS's synchronous approach to loading would result in the browser appearing to stall as each dependency was loaded, in order; an asynchronous approach, matching the way assets like CSS and images are loaded in the browser, was clearly required.</p>\n<p>That's where ES Modules come in. They implement something called 'top level await', which is basically just a way of saying &quot;You know how <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\"><code>await</code></a> works? Every ES Module is by default wrapped in that.&quot;</p>\n<h3 id=\"but-it-s-not-just-synchronous-vs-asynchronous\" tabindex=\"-1\">But it's Not Just Synchronous vs. Asynchronous <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\">#</a></h3>\n<p>Understanding synchronous vs. asynchronous is a good first step, but the real difference under the hood — and the reason why you want to test natively in whatever exports approach your build chain uses — comes down to the consequences of being synchronous or asynchronous.</p>\n<p>Imagine your Javascript interpreter parsing a single file. It hits a line like:</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">47</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The interpreter can then:</p>\n<ol>\n<li>Allocate memory for the value of <code>foo</code> to inhabit</li>\n<li>Populate that memory with <code>47</code></li>\n<li>Move on and be done with it</li>\n</ol>\n<p>Nice and simple, right? But what if the value <code>47</code> isn't there yet?</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchFortySeven</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>If you've used <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promises</code></a> before, you'll know that the interpreter works more like:</p>\n<ol>\n<li>Allocate memory for the value of <code>foo</code> to inhabit</li>\n<li>Populate that memory with a Promise</li>\n<li>Move on to the next thing</li>\n<li>Check periodically in the Event Loop for the Promise to be fulfilled</li>\n<li>...</li>\n<li>...</li>\n<li>Now finally populate the memory with <code>47</code></li>\n</ol>\n<p>This pretty much describes the under-the-hood difference between CJS and ESM.</p>\n<ul>\n<li>CJS immediately and synchronously processes all exports and sets their value in memory at that time</li>\n<li>ESM asynchronously processes all exports and sets their value in memory when all required processes (loading, calculating, etc.) have been completed</li>\n</ul>\n<p>As a consequence of this:</p>\n<ul>\n<li>CJS exports <em>can never</em> be recalculated during a given execution; they are what they are at the initial export time. So, if you have a module that exports a default; waits for a Promise to resolve; then exports the new value, the CJS import will only ever get the default value.</li>\n<li>ESM exports <em>can</em> be recalculated during a given execution. In the previous example, the exported value would change during the execution, and you would be able to access the new value.</li>\n</ul>\n<h2 id=\"an-esm-testing-toolchain\" tabindex=\"-1\">An ESM Testing Toolchain <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\">#</a></h2>\n<p>Obviously this means that you need to be careful in testing — you want to write tests that check the <em>actual</em> value the code will produce in production, and it's a problem if the tests assume the value will never change and it does (or vice versa). So stick to a testing toolchain that natively uses whatever module format your build chain exports.</p>\n<p>Facebook's excellent Jest testing framework <a href=\"https://jestjs.io/docs/ecmascript-modules\">does not yet support ES Modules well</a>, so, while it's a great choice for CJS build chains, you should avoid it for ESM.</p>\n<p>For ES Modules, I like the Mocha framework, which has <a href=\"https://mochajs.org/#nodejs-native-esm-support\">supported ESM since mid-2020</a>. It doesn't offer all of the great React-specific features you get for free in Jest, but it's a solid, flexible, and fast framework.</p>\n<p>Now you know the difference between ES Modules and CommonJS. Go out, and reuse your code!</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>And you may have, depending on the npm modules you use. <a href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>You're basically using CJS and <code>require</code>ing external files to give you the ESM interfaces, and your build chain will need to reflect that you're using both, so you'd really better be determined to mix it up! <a href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>The syntax for CJS is also, to my eyes at least, <a href=\"https://requirejs.org/docs/whyamd.html#amd\">cleaner than that of an early competitor, AMD</a> <a href=\"https://wadearmstrong.com/_site/things/commonjs_esmodules_test-natively/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
			"date_published": "2023-05-12T00:00:00Z"
		}
		,
		{
			"id": "https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/",
			"url": "https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/",
			"title": "CommonJS, ES Modules, and Why to Test Natively in One or the Other",
			"content_html": "<h1 id=\"commonjs-es-modules-and-why-to-test-natively-in-one-or-the-other\" tabindex=\"-1\">CommonJS, ES Modules, and Why to Test Natively in One or The Other <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\">#</a></h1>\n<p>In Javascript, there are two different ways that a given file can export functions, objects, values, and other components, for reuse in a second file or files — CommonJS ('CJS') and ES Modules ('ESM'). These two methods of export are actually surprisingly different, because they were designed for use in completely separate circumstances. Because they're so different, it's important to test them using a different toolchain.</p>\n<h2 id=\"where-you-ll-see-the-difference\" tabindex=\"-1\">Where You'll See The Difference <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\">#</a></h2>\n<p>If you've worked in Javascript for a while, you've probably become used to the <a href=\"https://nodejs.org/docs/latest-v20.x/api/modules.html#requireid\"><code>require()</code></a> syntax for including the contents of other files, and the <a href=\"https://nodejs.org/docs/latest-v20.x/api/modules.html#moduleexports\"><code>module.exports</code></a> syntax for exporting features from a file:</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> importedModule <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/module.js'</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token function\">importedModule</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>\tvalue<br><span class=\"token punctuation\">}</span> </code></pre>\n<p>That's a tip-off that you're using CommonJS; ESM uses <a href=\"https://tc39.es/ecma262/#sec-imports\"><code>import</code></a> and <a href=\"https://tc39.es/ecma262/#sec-exports\"><code>export</code></a> for the same jobs:</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> importedModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'/path/to/module.js'</span><br><br><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token function\">importedModule</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> value<span class=\"token punctuation\">;</span></code></pre>\n<p>For most developers, this will be the only time they see a difference between the two approaches. Which syntax you use is probably going to be defined by the frameworks you're using:</p>\n<ul>\n<li>Node natively supports CJS, but has supported ESM since v.12</li>\n<li>React supports both, but <a href=\"https://create-react-app.dev\">create-react-app</a> uses ESM (which one you choose will primarily be defined by your bundler)</li>\n<li>Angular supports both, but strongly prefers ESM</li>\n<li>Vue switched to ESM in v.13</li>\n</ul>\n<p>While technically you can mix CJS and ESM in a single project<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\" id=\"fnref1\">[1]</a></sup>, that's a good way to cause build chain problems. You can't practically mix the two syntaxes in a single file<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\" id=\"fnref2\">[2]</a></sup>.</p>\n<h2 id=\"what-is-the-difference-under-the-hood\" tabindex=\"-1\">What Is The Difference Under The Hood <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\">#</a></h2>\n<p>But it's not just build chains that have trouble with the two different export formats — there are actually significant technical differences in the way that ESM and CJS are implemented.</p>\n<h3 id=\"why-commonjs-is-here\" tabindex=\"-1\">Why CommonJS is Here <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\">#</a></h3>\n<p>First, a little history. When Node first came around, there was no standardized way to include components from different javascript files. They chose CommonJS, one of the major proposals for module exporting and loading at the time, not least because it was straightforward to use on servers<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\" id=\"fnref3\">[3]</a></sup>.</p>\n<p>One thing that made it so straightforward on servers was that it loads all included modules <em>synchronously</em> — that is, it kind of assumes that the file containing the modules will just 'be there' when it hits the <code>require()</code> line in the code. This is true on servers, so that's a great choice for Node.</p>\n<h3 id=\"why-es-modules-are-here\" tabindex=\"-1\">Why ES Modules are Here <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\">#</a></h3>\n<p>Of course, on the Web, files are not at all 'just there' — they take a while to load from wherever in the world they are hosted. CJS's synchronous approach to loading would result in the browser appearing to stall as each dependency was loaded, in order; an asynchronous approach, matching the way assets like CSS and images are loaded in the browser, was clearly required.</p>\n<p>That's where ES Modules come in. They implement something called 'top level await', which is basically just a way of saying &quot;You know how <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\"><code>await</code></a> works? Every ES Module is by default wrapped in that.&quot;</p>\n<h3 id=\"but-it-s-not-just-synchronous-vs-asynchronous\" tabindex=\"-1\">But it's Not Just Synchronous vs. Asynchronous <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\">#</a></h3>\n<p>Understanding synchronous vs. asynchronous is a good first step, but the real difference under the hood — and the reason why you want to test natively in whatever exports approach your build chain uses — comes down to the consequences of being synchronous or asynchronous.</p>\n<p>Imagine your Javascript interpreter parsing a single file. It hits a line like:</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">47</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The interpreter can then:</p>\n<ol>\n<li>Allocate memory for the value of <code>foo</code> to inhabit</li>\n<li>Populate that memory with <code>47</code></li>\n<li>Move on and be done with it</li>\n</ol>\n<p>Nice and simple, right? But what if the value <code>47</code> isn't there yet?</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchFortySeven</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>If you've used <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promises</code></a> before, you'll know that the interpreter works more like:</p>\n<ol>\n<li>Allocate memory for the value of <code>foo</code> to inhabit</li>\n<li>Populate that memory with a Promise</li>\n<li>Move on to the next thing</li>\n<li>Check periodically in the Event Loop for the Promise to be fulfilled</li>\n<li>...</li>\n<li>...</li>\n<li>Now finally populate the memory with <code>47</code></li>\n</ol>\n<p>This pretty much describes the under-the-hood difference between CJS and ESM.</p>\n<ul>\n<li>CJS immediately and synchronously processes all exports and sets their value in memory at that time</li>\n<li>ESM asynchronously processes all exports and sets their value in memory when all required processes (loading, calculating, etc.) have been completed</li>\n</ul>\n<p>As a consequence of this:</p>\n<ul>\n<li>CJS exports <em>can never</em> be recalculated during a given execution; they are what they are at the initial export time. So, if you have a module that exports a default; waits for a Promise to resolve; then exports the new value, the CJS import will only ever get the default value<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\" id=\"fnref4\">[4]</a></sup>.</li>\n<li>ESM exports <em>can</em> be recalculated during a given execution. In the previous example, the exported value would change during the execution, and you would be able to access the new value.</li>\n</ul>\n<h2 id=\"an-esm-testing-toolchain\" tabindex=\"-1\">An ESM Testing Toolchain <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\">#</a></h2>\n<p>Obviously this means that you need to be careful in testing — you want to write tests that check the <em>actual</em> value the code will produce in production, and it's a problem if the tests assume the value will never change and it does (or vice versa). So stick to a testing toolchain that natively uses whatever module format your build chain exports.</p>\n<p>Facebook's excellent Jest testing framework <a href=\"https://jestjs.io/docs/ecmascript-modules\">does not yet support ES Modules well</a>, so, while it's a great choice for CJS build chains, you should avoid it for ESM.</p>\n<p>For ES Modules, I like the Mocha framework, which has <a href=\"https://mochajs.org/#nodejs-native-esm-support\">supported ESM since mid-2020</a>. It doesn't offer all of the great React-specific features you get for free in Jest, but it's a solid, flexible, and fast framework.</p>\n<p>Now you know the difference between ES Modules and CommonJS. Go out, and reuse your code!</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>And you may have, depending on the npm modules you use. <a href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>You're basically using CJS and <code>require</code>ing external files to give you the ESM interfaces, and your build chain will need to reflect that you're using both, so you'd really better be determined to mix it up! <a href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>The syntax for CJS is also, to my eyes at least, <a href=\"https://requirejs.org/docs/whyamd.html#amd\">cleaner than that of an early competitor, AMD</a> <a href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>In practice, this is easy to get around: just export a Promise <a href=\"https://wadearmstrong.com/_site/commonjs_esmodules_test-natively/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
			"date_published": "2020-04-01T00:00:00Z"
		}
		,
		{
			"id": "https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/",
			"url": "https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/",
			"title": "Console Log vs. Breakpoint",
			"content_html": "<h1 id=\"console-log-vs-breakpoint\" tabindex=\"-1\">Console Log vs. Breakpoint <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\">#</a></h1>\n<p>I <code>console.log</code> a lot. And I know that’s not always classy. Folks look at me crosswise because I don’t open up a debugger — and all Web browsers have quite good debuggers these days<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" id=\"fnref1\">[1]</a></sup> — but here’s the thing: it’s not just that I’m old-fashioned (although I am, and I certainly started developing well before decent in-browser debuggers), there’s acutally something about <code>console.log</code>ging (or fmt.printlning or echoing) that’s different than using a debugger. Logging out your code’s state is debugging from a specific perspective; using your browser debugger actually moves you to a different perspective.</p>\n<h3 id=\"how-perspectives-work\" tabindex=\"-1\">How Perspectives Work <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\">#</a></h3>\n<p>In the social sciences<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" id=\"fnref2\">[2]</a></sup>, there’s this concept of &quot;framing.&quot; A &quot;frame&quot; is a filter, more or less, through which we all take in and analyze information. Some filters are basic and come from our experiences in nature — &quot;Mom is good, this smells like Mom, it must be good&quot; — but most are socially-constructed — &quot;Eating fat makes me fat, so I’ll choose the 90% lean ground beef over the 10% fat ground beef.&quot;<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" id=\"fnref3\">[3]</a></sup></p>\n<p>While the filter itself is an abstract entity, neuropsychologists have considerable evidence that something much like frames actually exists in your brain. The Spreading Activation Theory holds that the likelihood an individual retrieves a memory is directly proportional to the strength of the connections to that memory. Think of memory like a graph, with nodes connected in the center as a crazy-quilt, but out at the edges as trees, with memory retrieval starting at the center. Each node on the graph is connected more strongly or more weakly to its neighbors; heck, think of components of memory as having PageRank. To get to a node on the edge, you need the path from the center to that edge to have sufficient strength throughout to get you there; but, once far enough down a path, the connections from a given node in that path to a node in a completely different path are much weaker than the within-path connections.</p>\n<p>A graph, showing a few childhood memories networked together, with GI Joe's Lt. Falcon way out on his own connected only to GI Joe, while other nodes are linked to each other</p>\n<p>Here’s a trivial example: my childhood memories. Look how many paths there are to get from my happy memories of playing to my traumatic memory of crashing my bike. But you have to activate a specific path to get to my memories of my GI Joe Lt. Falcon action figure.</p>\n<p>What that means for all of us is that, when we get far enough down our semantic network, only one frame is available to us; others are just too weakly-connected to flip over to, at least not without significant mental effort. This happened to me in a job interview once — I was working on GDPR compliance at my old job, so was thinking about privacy of PII. My interviewer asked me how to keep a variable’s value private in Javascript in the browser. The correct answer was &quot;using a closure,&quot; but, focused on the GDPR frame, I said something like &quot;once you send it to the browser, man, everyone can see it! It’s the wild west out there! There’s no privacy.&quot;<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" id=\"fnref4\">[4]</a></sup> The concept of &quot;private&quot; was framed in my mind as &quot;information,&quot; not &quot;variable private to a given function or method,&quot; so I missed it.</p>\n<p>This is all a long way of saying that the frame you use to filter information from the world around you absolutely neurologically limits your ability to think about that information in a different way. But, when we’re stuck on a programming (or, really, any life) challenge, thinking about the problem in a different way is essential to moving forward.</p>\n<h3 id=\"the-debugger-perspective\" tabindex=\"-1\">The Debugger Perspective <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\">#</a></h3>\n<p>It’s kind of obvious where I’m going here: using a debugger gives you a specific frame through which you look at the world. To be more exact, it gives you the frame of looking at the code from the outside.</p>\n<p>Which is great! This allows us all to use debuggers to understand code we have no business understanding. Third-party library? No problem! Spooky behavior potentially caused by the platform not adhering to the spec? I can figure that out!</p>\n<p>But it is that divorced-from-the-source-code frame, and it’s hard to get back into the code directly from the debugger. Not physically, since usually there’s a line number or even a link to the line in your IDE; but in your mental model. You need to store lots of state in your head: information of where you’re looking in your code; what drives the execution of that code; which inputs you care about; and more.</p>\n<p>Debugging is thus great if you have something behaving wrong and you don’t know why. You can use its frame to evacuate presuppositions from your head and look fresh from the outside.</p>\n<h3 id=\"the-logging-perspective\" tabindex=\"-1\">The Logging Perspective <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\">#</a></h3>\n<p>But, look, sometimes everything is going great. You’re writing code, you’re on a roll, but you need to know: what is the shape of this data here? Do these two lines really execute out-of-order? We fall into that branch, right?</p>\n<p>Then your perspective is inside the code. And what works well in that frame? Well, logging out the data that you need. Yeah, in a lot of cases you can set a breakpoint and watch what’s going on around that, but the point is that you don’t need a generic act that might give you all different kinds of information: you need to specifically get the piece of data you want.</p>\n<p>Logging gives you complete control of that. It defines the frame as &quot;I’m here, what’s the situation with ?&quot;</p>\n<p>Logging is also great when you’re refactoring. Want to make sure you’re still executing a step in some complex branching process that all flows back together in the end? Well, step through dozens of operations… or just put one <code>console.log('in interestingFunction()')</code> in the right place. Doesn’t matter how you change your branching structure, you don’t have to keep track of where you want to set the breakpoint, you just get the informtion you need, when it’s available.</p>\n<h3 id=\"can-t-we-all-just-get-along\" tabindex=\"-1\">Can’t We All Just Get Along? <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\">#</a></h3>\n<p>I may be a bad developer, but it’s not because I <code>console.log()</code> things a lot. You may be a good developer, but it’s not because you’re better with a debugger than I am.<sup class=\"footnote-ref\"><a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" id=\"fnref5\">[5]</a></sup></p>\n<p>But one part of what makes us good developers is our ability to look at problems in effective ways. So keep in mind the ways that you can use these two different debugging techniques to frame your approach to the problem in different ways. That gives you one more tool in your belt.</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Rest not in peace, IE11 Developer Tools! <a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>Developers should spend a lot more time reading social sciences <a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>Yes, the frame is tricking the speaker there. Frames do that a lot <a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>And yet, they hired me <a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p>I use my debugger all the time, so you might not be <a href=\"https://wadearmstrong.com/_site/things/console-log_vs_breakpoint/\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
			"date_published": "2020-02-11T00:00:00Z"
		}
		,
		{
			"id": "https://wadearmstrong.com/_site/things/sample_code_review_checklist/",
			"url": "https://wadearmstrong.com/_site/things/sample_code_review_checklist/",
			"title": "Sample Code Review Checklist",
			"content_html": "<h1 id=\"sample-code-review-checklist\" tabindex=\"-1\">Sample Code Review Checklist <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h1>\n<h2 id=\"for-the-developer\" tabindex=\"-1\">For the Developer <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h2>\n<h3 id=\"developing-good-code\" tabindex=\"-1\">Developing Good Code <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h3>\n<ul>\n<li>Your code should comply with the Code Standards.</li>\n</ul>\n<h3 id=\"before-you-pr\" tabindex=\"-1\">Before You PR <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h3>\n<p>A good code review starts with a good pull request. Before you find yourself a reviewer for your code, make sure:</p>\n<ul>\n<li>Things that need docblocks have docblocks, and existing docblocks are up-to-date</li>\n<li>Existing tests pass</li>\n<li>All new code has unit tests</li>\n<li>You've removed <code>console.log()</code> and <code>var_dump()</code></li>\n<li>There's no commented-out code</li>\n<li>Your code builds successfully</li>\n<li>Your code does what it says on the label (if you have any concerns whether or not your code works, get someone from QE to educate you on the use cases you're developing for)</li>\n<li>You pulled from master, and resolved any merge conflicts</li>\n<li>You cleaned up your git timeline (commit, and even push, often; but only keep meaningful commits, that are also safe to roll back to, in the log)</li>\n</ul>\n<p>If you haven't done all of the above, then you won't get a code review -- your work will just get kicked back to you. Spend your time, and your reviewer's time, well, and do all of these first. Ask for help if you need it.</p>\n<h3 id=\"after-you-open-your-pr-but-before-you-get-a-reviewer\" tabindex=\"-1\">After You Open Your PR, but Before You Get a Reviewer <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h3>\n<ul>\n<li>Have you marked up your PR in order that people who haven't worked with the problem can easily understand your code?\n<ul>\n<li>All non-obvious pieces of code have a note on what they do and why</li>\n<li>If particular pieces of code match to particular requirements, explain how</li>\n<li>Any kludges are explained, especially why this kludge is actually the best option</li>\n</ul>\n</li>\n<li>If any TODOs are left, make sure you've opened tickets for them, and comment on them in the PR (on specific lines that make the need for these new tickets clear, if possible)</li>\n</ul>\n<h3 id=\"getting-a-reviewer\" tabindex=\"-1\">Getting a Reviewer <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h3>\n<ul>\n<li>Pick one randomly</li>\n<li>Don't review your own ticket</li>\n<li>If you think an SME should see your ticket, tag them</li>\n<li>Make sure your reviewer(s) know they're on the hook</li>\n</ul>\n<h2 id=\"for-the-reviewer\" tabindex=\"-1\">For the Reviewer <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h2>\n<h3 id=\"before-you-review\" tabindex=\"-1\">Before You Review <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h3>\n<ul>\n<li>If you're the named reviewer, it's your job to make the review work:\n<ul>\n<li>All PRs take 2 approvers; if there's only 1 assigned, get another</li>\n<li>If you know of an SME for the codebase, see if they'll do a review</li>\n<li>Once you and another person have signed off, move the ticket to Pre-UAT</li>\n</ul>\n</li>\n<li>Block out at least 1 hour</li>\n<li>Read the ticket and make sure you understand the requirements</li>\n<li>You should be able to trust that the code is fit for purpose, so spend time reviewing the written code rather than exercising the code in execution. But, if in doubt, pull and run the code.</li>\n</ul>\n<h3 id=\"early-returns-are-good-even-in-code-review\" tabindex=\"-1\">Early Returns are Good, Even In Code Review <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h3>\n<p>If any of the below are true, mark the code as Needs Work and bounce it right back:</p>\n<ul>\n<li>Existing tests don't pass</li>\n<li>No tests for new code</li>\n<li>Tests are unreadable</li>\n<li>Merge conflicts, no matter how trivial</li>\n<li>Git log is a mess</li>\n<li>Lots of <code>console.log()</code> or <code>var_dump()</code></li>\n<li>Lots of commented-out code</li>\n</ul>\n<h3 id=\"giving-good-code-review\" tabindex=\"-1\">Giving Good Code Review <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h3>\n<ul>\n<li>You should be able to understand how the code works, and why, by the end of your review</li>\n<li>Ask any questions you have within Stash; the other reviewers may have the same thought</li>\n<li>No comment or question is too small, but</li>\n<li>Read the code before asking how something works, even if it's code from another module</li>\n<li>Do the math/logic to make sure that all permutations of code flow are being tested</li>\n<li>Attend to the Code Standards as you look at the code; you may want to keep a checklist</li>\n</ul>\n<h2 id=\"further-reading\" tabindex=\"-1\">Further Reading <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/sample_code_review_checklist/\">#</a></h2>\n<ul>\n<li><a href=\"https://blog.fogcreek.com/increase-defect-detection-with-our-code-review-checklist-example/\">Fog Creek's 'Stop More Bugs with our Code Review Checklist</a></li>\n<li><a href=\"https://blog.codinghorror.com/code-smells/\">Jeff Atwood's 'Code Smells'</a></li>\n<li><a href=\"https://blog.smartbear.com/development/creating-your-code-review-checklist/\">'Creating Your Code Review Checklist' from SmartBear</a></li>\n<li><a href=\"https://dev.to/codemouse92/10-principles-of-a-good-code-review-2eg\">10 Principles of a Good Code Review</a></li>\n<li><a href=\"https://dev.to/samjarman/giving-and-receiving-great-code-reviews\">Giving and Receiving Great Code Reviews</a></li>\n<li><a href=\"https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/\">Top 10 Pull Request Review Mistakes</a></li>\n</ul>\n",
			"date_published": "2019-10-02T00:00:00Z"
		}
		,
		{
			"id": "https://wadearmstrong.com/_site/things/why_to_use_ssh_proxy-command/",
			"url": "https://wadearmstrong.com/_site/things/why_to_use_ssh_proxy-command/",
			"title": "Why To Use SSH ProxyCommand",
			"content_html": "<h1 id=\"you-should-switch-to-proxycommmand-with-ssh\" tabindex=\"-1\">You Should Switch to ProxyCommmand With SSH <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/why_to_use_ssh_proxy-command/\">#</a></h1>\n<p>SSH forwarding is great, but ProxyCommand lets you actually script how to make multiple jumps to get to a box.</p>\n<p>To set it up, do the following:</p>\n<ol>\n<li>Copy your public key to all the places you want it</li>\n</ol>\n<ul>\n<li>You may want to put your public key in puppet, but iff you put your <em>private</em> key in puppet, then everyone with access to Puppet can see it, so... no\n<ul>\n<li><code>mkdir .ssh</code></li>\n<li><code>vim .ssh/authorized_keys</code> and paste your private key there</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>On your laptop, create a file that looks like the following file at <code>.ssh/config</code></li>\n</ol>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\">Host foo<br> User warmstrong<br> Hostname foo.yourdomain.dev<br><br>Host automation<br> User warmstrong<br> Hostname automation.yourdomain.dev<br><br>Host jump <span class=\"token comment\">#this creates a host aliased to \"jump\", now you can \"ssh jump\"</span><br> Hostname jumpbox.dom<br> User warmstrong<br> ProxyCommand <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-W</span> %h:%p foo <span class=\"token comment\">#This means \"ssh to this box using foo\"</span><br><br>Host admin.other.dom<br> User warmstrong<br> ProxyCommand <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-W</span> %h:%p foo <span class=\"token comment\">#Using the Hostname(%h) and Port(%p) you're using anyway, and passing stdio directly through(-W) but hiding errors(-q)</span><br><br>Host uat<br> User warmstrong<br> Hostname uat01.dom<br> ProxyCommand <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-W</span> %h:%p jump <span class=\"token comment\">#Note that you're using the named jump box above to go here</span><br><br>Host logrepo<br> User warmstrong<br> Hostname logrepo.dom<br> ProxyCommand <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-W</span> %h:%p jump <span class=\"token comment\">#SSH will resolve everything in the chain, so it figures out you need jump, jump needs foo, and does all those sshes to get there</span><br><br>Host static-server<br> User warmstrong<br> Hostname static.yourdomain.dom<br> ProxyCommand <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-W</span> %h:%p jump <span class=\"token comment\">#Fun fact, -W means that this works for scp as well as ssh</span></code></pre>\n<ol start=\"3\">\n<li>You can now ssh directly to <code>uat</code>, <code>logrepo</code>, etc. without hitting multiple jump boxen.</li>\n</ol>\n",
			"date_published": "2019-09-14T00:00:00Z"
		}
		,
		{
			"id": "https://wadearmstrong.com/_site/things/on-call_checklist/",
			"url": "https://wadearmstrong.com/_site/things/on-call_checklist/",
			"title": "On-Call Checklist",
			"content_html": "<p>Did you get called for an issue? This checklist will help you make it through. <em>Do it in order</em>.</p>\n<ol>\n<li>If you were woken up, they can wait 2 minutes while you start some coffee. Don't make them wait much longer, but get that coffee started!</li>\n<li>Join chat. Announce your presence, and what team you're here for</li>\n<li><em>Slow down</em>. Take a few deep breaths.</li>\n<li>If this is an incident, make sure the Incident Manager (IM) explains to you <em>exactly the current understanding</em> of what's happening.</li>\n<li>If this is not an incident, then <em>feel free to ask NOC to clarify</em> what they see as going on</li>\n<li>Remember that you may be able to fix the problem, but <em>your biggest job is to route the problem to other people who can fix it</em>.</li>\n<li>Ask questions to confirm that they're actually dealing with your technology, and not some other part of the stack.</li>\n</ol>\n<ul>\n<li>If you <em>don't know what the thing is that is erroring</em>, call the secondary or tertiary. <em>A big part of the on-call job is routing info</em>.</li>\n<li>If it's some other part of the stack, recommend the team or person whom you'd contact outside of an incident; NOC will handle finding the person on-call from that team.</li>\n<li>If it's not your tech, share information to help prove it's not, but <em>stay on for at least a little while</em> while others confirm. <em>The longer you stay, the more you learn</em>.</li>\n</ul>\n<ol start=\"8\">\n<li>Once you know it's your tech, ask questions to make sure you understand the details of the issue:</li>\n</ol>\n<ul>\n<li>On what pages?</li>\n<li>On what part of the app?</li>\n<li>What actions have to be taken to cause the issue?</li>\n<li>What, specifically, is the degradation of user experience?</li>\n</ul>\n<ol start=\"9\">\n<li>If, at this time, <em>you don't understand what's going on</em> or <em>don't understand the technology,</em> call your backup (or the tertiary)</li>\n<li>Make sure that you agree this is a real emergency. If you don't think the degradation is that serious, speak up and explain why. You may be right, you're the expert!</li>\n<li>Take some more deep breaths. Look away from the screen. Make sure you have water/caffeinated beverage/etc. Take a sip. <em>Slow down</em>.</li>\n<li>Remember that you may be able to fix the problem, but <em>your biggest job is to route the problem to other people who can fix it</em>.</li>\n<li>If it is an emergency, find specifically what component is the problem.</li>\n<li>As you're working, if you're unsure about anything, ask the IM, or anyone else whom you recognize/trust, offline. <em>Everyone wants to help</em>!</li>\n<li>When looking for causes, note that, <em>during an emergency, only 2 things can be done</em>, so focus on solutions involving these:</li>\n</ol>\n<ul>\n<li>Roll back a release, so look for changes in the most recent release</li>\n<li>Override a config, so look for ways to turn off the problematic feature</li>\n</ul>\n<ol start=\"16\">\n<li>If you have a fix you're confident in, <em>speak up</em>.</li>\n</ol>\n<ul>\n<li>It's the IM's job to decide to do the fix or not, so give them the information!</li>\n<li>Remember you're the most-qualified person, in this particular area</li>\n<li>Propose the thing, then do it/make sure it gets done</li>\n</ul>\n<ol start=\"17\">\n<li>If you don't have a fix you're comfortable in, <em>it's ok to ask for help</em> - It's ok to act as a router, and not to directly fix</li>\n</ol>\n<ul>\n<li>If asked to implement a solution, or for the information to implement the solution, and you can do it, do it! You don't need anyone's approval. Don't call someone on just because you're nervous. This is why you get paid the big bucks!</li>\n<li>If you don't know the solution, make sure you at least know the problem and solution space, so that you can call in the right help\n<ul>\n<li>If during daytime, call on whomever you'd normally consider to be the SME for that area</li>\n<li>After-hours, have NOC call the secondary or tertiary, you have backup!</li>\n</ul>\n</li>\n<li>Remember that you may be able to fix the problem, but <em>your biggest job is to route the problem to other people who can fix it</em>.</li>\n<li>If you call in another team member to help, <em>make sure to stick around for the remainder of the incident</em>, and learn. Your goal should be to:\n<ul>\n<li>Learn enough to do it yourself next time <em>if this is one of the technologies we're responsible for</em></li>\n<li>Learn whom to escalate to, if not</li>\n</ul>\n</li>\n</ul>\n<ol start=\"18\">\n<li>Write up what you did in the on-call diary</li>\n</ol>\n",
			"date_published": "2019-08-24T00:00:00Z"
		}
		,
		{
			"id": "https://wadearmstrong.com/_site/things/code_standards/",
			"url": "https://wadearmstrong.com/_site/things/code_standards/",
			"title": "Code Standards",
			"content_html": "<h1 id=\"recommended-code-standards\" tabindex=\"-1\">Recommended Code Standards <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h1>\n<p>In my experience, these are standards that make code</p>\n<ul>\n<li>Better</li>\n<li>Easier-to-maintain</li>\n<li>More pleasant to deal with</li>\n</ul>\n<p>Try to use these as you write code. While the world is never nice and clean, and you'll break all of these sometime, try to at least do so consciously (and explain why, in your PR).</p>\n<h2 id=\"core-concepts\" tabindex=\"-1\">Core Concepts <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h2>\n<ul>\n<li>Maintain a good <a href=\"https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88\">code line of sight</a></li>\n<li>Keep the happy path obvious</li>\n<li>Return early</li>\n<li>Don't reinvent the wheel</li>\n<li>Override the least possible, and contribute the most possible back to the core</li>\n<li>When creating something new, make it possible to override</li>\n<li>Code should be easy for the next developer to understand</li>\n<li>Prefer clarity and readability to brilliance or cleverness</li>\n</ul>\n<h2 id=\"applying-these-concepts-to-details\" tabindex=\"-1\">Applying These Concepts To Details <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h2>\n<h3 id=\"rules-of-thumb\" tabindex=\"-1\">Rules of Thumb <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h3>\n<ul>\n<li>Rather than</li>\n</ul>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>happy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">do</span> 1st happy thing<span class=\"token punctuation\">;</span><br>  <span class=\"token operator\">...</span><br>  <span class=\"token keyword\">do</span> nth happy thing<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">throw</span> <span class=\"token function\">tantrum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>try</p>\n<pre class=\"language-javascript\" tabindex=\"0\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>happy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br> <span class=\"token keyword\">throw</span> <span class=\"token function\">tantrum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">do</span> 1st happy thing<span class=\"token punctuation\">;</span><br><span class=\"token operator\">...</span><br><span class=\"token keyword\">do</span> nth happy thing<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>If you do the above, you probably don't need an <code>else</code></li>\n<li>The above is a really good way to <code>return</code> early, before you do any real work, when you're outside the happy path</li>\n<li>If there are several <code>if</code> s in a row, consider a <code>switch</code> statement</li>\n<li>Name things well. Be clear about what data they contain/tasks they do. Related things have related names</li>\n<li>Always return from functions. Always return the same datatype from a given function</li>\n<li>Break out reusable behavior into its own function, but</li>\n<li>Don't put an excessive number of functions on the call stack</li>\n<li>Your class should have an interface like similar classes; your function should have a signature like similar functions</li>\n<li>Make things configurable and those configurations overridable</li>\n</ul>\n<h3 id=\"usefulness\" tabindex=\"-1\">Usefulness <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h3>\n<ul>\n<li>Did you really need to override the <em>entire</em> template?</li>\n<li>Are any magic numbers set in a config file? Can that config file be overridden?</li>\n</ul>\n<h3 id=\"readability\" tabindex=\"-1\">Readability <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h3>\n<ul>\n<li>Are all of your functions explained in docblocks? Do the explanations actually match the current code, and are all parameters actually documented?</li>\n<li>Do not nest ternaries. Save your logical comparisons in well-named variables and compare those</li>\n<li>Don't rely on the next developer to remember the order of arithmetic or logical operations; group parts of statements with parentheses to make your meaning obvious</li>\n<li>Comments explain <em>why</em> you did it, not <em>what</em> it does</li>\n<li>Functions do one thing</li>\n<li>Four parameters for a function is probably too many</li>\n<li>You should be able to read the entire method/function without scrolling</li>\n<li>Don't Repeat Yourself</li>\n<li>Constants are UPPERCASE even if you <code>const</code> them</li>\n<li>Write comments just like you'd explain something to another developer; don't feel like you need to use fancy, formal language</li>\n</ul>\n<h3 id=\"performance\" tabindex=\"-1\">Performance <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h3>\n<ul>\n<li>Do you save the value of expensive calculations in a variable, and then reference that variable? Are even cheap calculations not done once per loop iteration when they could be done just once?</li>\n<li>Do you use temporary variables inside loops, to make it easy to understand what the calculation is?</li>\n<li>For Javascript, do you declare variables outside loops, and update them inside?</li>\n<li>Are you sure that loop will end?</li>\n</ul>\n<h3 id=\"security\" tabindex=\"-1\">Security <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h3>\n<ul>\n<li>If you're accepting input from the user, an API, or another component, do you validate that input is safe and of the right type, length, etc.?</li>\n<li>If you get bad input, do you handle it well?</li>\n<li>What happens if this gets passed a string containing Unicode characters? Does it not just handle it, but handle it correctly?</li>\n<li>What happens if someone passes a <code>&lt;script&gt;</code> tag into your code?</li>\n<li>If you're using PHP, <em>all</em> DB access should be via PDO. <a href=\"https://xkcd.com/327/\">Don't concatenate your own SQL statement</a>.</li>\n</ul>\n<h3 id=\"testing\" tabindex=\"-1\">Testing <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h3>\n<ul>\n<li>Do your tests cover both the happy path and <strong>all</strong> error paths?</li>\n<li>Do your tests detect breakage?</li>\n<li>Are your tests brittle? Will they fail if someone changes an html attribute or the order in which attributes are assigned to an object? Do they have to fail under those circumstances?</li>\n<li>If you're testing with strings, have you tested with unicode strings?</li>\n<li>Do your unit tests actually test units, and not modules in integration?</li>\n</ul>\n<h3 id=\"cleanliness\" tabindex=\"-1\">Cleanliness <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h3>\n<ul>\n<li>Don't leave in TODOs, ticket them up</li>\n<li>Delete commented-out code in a PR</li>\n<li>Each PR should only include commits that it's safe to roll back to; squash your commits before making a PR</li>\n</ul>\n<h3 id=\"formatting\" tabindex=\"-1\">Formatting <a class=\"header-anchor\" href=\"https://wadearmstrong.com/_site/things/code_standards/\">#</a></h3>\n<ul>\n<li>If writing PHP, generally follow <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\">PSR2</a>, except for a few things:\n<ul>\n<li>Tabs are clearly superior to spaces, so we use them</li>\n<li><code>TRUE</code>, <code>FALSE</code>, and <code>NULL</code> are generally capitalized, although this is not required</li>\n</ul>\n</li>\n<li>If writing Javascript, you <em>must</em> be running <a href=\"https://eslint.org/\">ESlint</a> and using an agreed-upon and shared config. If you do not lint your code then you will be mocked ceaselessly for any style violations</li>\n<li><code>variablesAreCamelCase</code></li>\n<li><code>indexes['are_snake_case']</code></li>\n<li><code>_</code> doesn't actually make your method or variable private so don't use it</li>\n</ul>\n",
			"date_published": "2019-07-04T00:00:00Z"
		}
		
	]
}
